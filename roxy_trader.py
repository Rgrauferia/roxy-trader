# Instalar la librer√≠a oficial de Alpaca (solo necesario una vez)
!pip install --upgrade alpaca-py

# === CONFIGURACI√ìN DE ROXY TRADER ===
from alpaca.data.historical import StockHistoricalDataClient
from alpaca.data.requests import StockBarsRequest
from alpaca.data.timeframe import TimeFrame
from alpaca.trading.client import TradingClient
from alpaca.trading.requests import MarketOrderRequest
from alpaca.trading.enums import OrderSide, TimeInForce
import pandas as pd
import datetime

# üîê Tus credenciales Paper
API_KEY = "PKEEDWE1AK50T5TR3JNM"
API_SECRET = "o6dUILZjbUUEHu2vUQHekGjy0K0xxxxxxxxxx"  # reemplaza si cambia
USE_PAPER = True  # True para paper, False para real

# Cliente de datos y cliente de trading
data_client = StockHistoricalDataClient(API_KEY, API_SECRET)
trading_client = TradingClient(API_KEY, API_SECRET, paper=USE_PAPER)

# === PAR√ÅMETROS DE LA ESTRATEGIA ===
symbol = "AAPL"
timeframe = TimeFrame.Minute
limit = 100

# Solicitar datos hist√≥ricos de AAPL
request_params = StockBarsRequest(
    symbol_or_symbols=symbol,
    timeframe=timeframe,
    limit=limit,
    start=datetime.datetime.now() - datetime.timedelta(minutes=limit),
)
bars = data_client.get_stock_bars(request_params).df

# Verificar si se obtuvieron datos
if bars.empty:
    print("‚ùå No se obtuvieron datos del mercado.")
else:
    df = bars[bars.symbol == symbol].copy()

    # === C√ÅLCULO DE INDICADORES ===
    df['close'] = df['close'].astype(float)
    df['delta'] = df['close'].diff()
    df['gain'] = df['delta'].clip(lower=0)
    df['loss'] = -df['delta'].clip(upper=0)

    avg_gain = df['gain'].rolling(window=14).mean()
    avg_loss = df['loss'].rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df['RSI'] = 100 - (100 / (1 + rs))

    df['EMA20'] = df['close'].ewm(span=20, adjust=False).mean()

    # √öltimos valores
    last_rsi = df['RSI'].iloc[-1]
    last_price = df['close'].iloc[-1]
    last_ema = df['EMA20'].iloc[-1]

    print(f"üìä √öltimo cierre: {last_price:.2f}")
    print(f"üìâ RSI: {last_rsi:.2f}")
    print(f"üìà EMA20: {last_ema:.2f}")

    # === L√ìGICA DE TRADING ===
    if last_rsi < 30 and last_price > last_ema:
        print("üü¢ Se√±al de COMPRA detectada")

        order = MarketOrderRequest(
            symbol=symbol,
            qty=1,
            side=OrderSide.BUY,
            time_in_force=TimeInForce.DAY
        )
        response = trading_client.submit_order(order)
        print("‚úÖ Orden de compra enviada:", response.id)

    elif last_rsi > 70 and last_price < last_ema:
        print("üî¥ Se√±al de VENTA detectada")

        order = MarketOrderRequest(
            symbol=symbol,
            qty=1,
            side=OrderSide.SELL,
            time_in_force=TimeInForce.DAY
        )
        response = trading_client.submit_order(order)
        print("‚úÖ Orden de venta enviada:", response.id)

    else:
        print("‚ö™Ô∏è Sin se√±ales claras en este momento.")
